-- NFTMinting.plutus

-- Define the necessary imports
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}

module NFTMinting (
    NFT(..),
    MintingDatum(..),
    mintNFT
) where

import           Plutus.Contract
import qualified PlutusTx
import           PlutusTx.Prelude         hiding (Semigroup(..), unless)
import           Ledger.Typed.Scripts     as Scripts
import           Ledger                   hiding (singleton)
import           Ledger.Contexts          as V
import           Data.Aeson               (FromJSON, ToJSON)
import           Data.Void                (Void)
import           Prelude                  (Semigroup(..))
import qualified Data.Map                 as Map
import           Data.Text                (Text)

-- Define the data types for NFTs
data NFT = NFT
    { tokenId :: Integer
    , tokenMetadata :: Text
    }

data MintingDatum = MintingDatum
    { nfts :: Map.Map Integer NFT
    }

-- Define JSON instances for data types
instance ToJSON NFT
instance FromJSON NFT
instance ToJSON MintingDatum
instance FromJSON MintingDatum

-- Define the validator script for NFT minting
validateNFTMinting :: NFT -> MintingDatum -> ScriptContext -> Bool
validateNFTMinting nft@NFT{tokenId} MintingDatum{nfts} ctx =
    traceIfFalse "Token ID must be unique" (not $ Map.member tokenId nfts)
    -- Add any additional validation rules here

nftMintingValidator :: NFT -> Scripts.TypedValidator MintingDatum
nftMintingValidator nft = mkTypedValidator @MintingDatum
    ($$(PlutusTx.compile [|| validateNFTMinting ||]) `PlutusTx.applyCode` PlutusTx.liftCode nft)
    $$(PlutusTx.compile [|| wrap ||])
  where
    wrap = Scripts.wrapValidator @MintingDatum @NFT

-- Define the address of the NFT minting validator script
nftMintingValidatorAddress :: NFT -> Ledger.Address
nftMintingValidatorAddress nft = scriptAddress (nftMintingValidator nft)

-- Define the entry point for minting NFTs
mintNFT :: NFT -> Contract () MintingSchema Text ()
mintNFT nft = do
    let val = nftMintingValidator nft
    key <- submitTx $ scriptInstanceContractAt val (nftMintingValidatorAddress nft)
    void $ awaitTxConfirmed $ txId key
